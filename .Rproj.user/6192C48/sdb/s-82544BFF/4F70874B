{
    "collab_server" : "",
    "contents" : "#05_cvi_ndvi_stats.R\n#This script was written by J. Atkins 2015, 2016 (jeffatkins@virginia.edu or @atkinsjeff)\n#https://github.com/atkinsjeff\n#\n#This script includes the linear regression model and all statistics from the manuscript\n#I have left a lot of old code in here because honestly I was learning as I went along and I just kept it here.\n##################\n#LANDSAT linear regression change model\n#each cell is recalculated to a change in time.\n\nrequire(gplots)\nlibrary(broom)\nlibrary(magrittr)\nrequire(plyr)\nlibrary(dplyr)\nrequire(tidyr)\nrequire(Hmisc)\nrequire(psych)\n####NEED TO ORDER SCRIPT BY PAPER\nsummary(ndvi.86)\ncellStats(ndvi.86, stat = \"mean\")\nsummary(ndvi.90)\ncellStats(ndvi.90, stat = \"mean\")\nsummary(ndvi.95)\ncellStats(ndvi.95, stat = \"mean\")\nsummary(ndvi.05)\ncellStats(ndvi.05, stat = \"mean\")\nsummary(ndvi.09)\ncellStats(ndvi.09, stat = \"mean\")\nsummary(ndvi.11)\ncellStats(ndvi.11, stat = \"mean\")\n\n\n#########  Linear regression scripts\n\n#### NDVI\nndvi.stack <- bind_rows(c(df.86, df.90, df.95, df.05, df.09, df.11))\nndvi.stack <- data.frame(ndvi.stack)\n\nstack <- ndvi.stack \nraw.stack <- stack\n\nstack <- gather(stack, \"rawyear\", \"ndvi\", 3:8)\n\nlibrary(stringr)\nstack$year <- as.numeric(unlist(str_extract_all(stack$rawyear, '\\\\d+')))\n\n\n#ndvi\n\nhead(df.86.11)\nndvi.86.11.positive <- subset(df.86.11, diff > 0)\nndvi.86.11.negative <- subset(df.86.11, diff <= 0)\n\n# evi\nhead(e.86.11)\nsummary(e.86.11)\nevi.86.11.positive <- subset(e.86.11, diff > 0)\nevi.86.11.negative <- subset(e.86.11, diff <= 0)\n\nhead(s.86.11)\nsummary(s.86.11)\nsavi.86.11.positive <- subset(s.86.11, diff > 0)\nsavi.86.11.negative <- subset(s.86.11, diff <= 0)\n\n########## Linear regressions with pipes\n\nlibrary(broom)\nlibrary(magrittr)\nlibrary(dplyr)\nrequire(tidyr)\n\n#NDVI\nlm.ndvi.pipe = \n  stack %>% \n  group_by(x,y) %>%\n  do({model = lm(ndvi~year, data=.)    # create your model\n  data.frame(tidy(model),              # get coefficient info\n             glance(model))})          # get model info\n\nlm.ndvi.pipe %>%\n  select(x, y, term, estimate, p.value)\n\nlm.ndvi.pipe %>%\n  select(x, y, term, estimate, adj.r.squared, p.value) %>%\n  spread(term, estimate) \n\nlm.ndvi.pipe.clean <- subset(lm.ndvi.pipe[,c(1,2,3,4,7,9)])\nlm.ndvi.pipe.clean <- subset(lm.ndvi.pipe.clean, term == \"year\")\n\n\nplot(lm.ndvi.pipe.clean$p.value)\n\n###3 Trying raster p values\n\n\ntemp.ndvi <- lm.ndvi.pipe.clean[,c(1,2,4,5)]\ntemp.ndvi$change <- temp.ndvi$estimate * 25\n\ntemp.ras <- lm.ndvi.pipe.clean[,c(1,2,5)]\nrasterNDVI.p <- rasterFromXYZ(temp.ras)\n\n#plotting p values\nbreakpoints <- c(0, 0.01, 0.05,1)\ncolors <- c(\"dark red\",\"red\",\"light grey\")\n\nplot(rasterNDVI.p,breaks=breakpoints,col=colors )+\n     mtext(\"P value\")\n\n#change\ntemp.ras.change <- temp.ndvi[,c(1,2, 5)]\nrasterNDVI.change <- rasterFromXYZ(temp.ras.change)\n\ncolfunc <- colorRampPalette(c(\"brown\", \"white\", \"dark green\"))\ncolfunc(12)\n\nbreakpoints.change <- c(-0.6, -0.5, -0.4, -0.3, -0.2, 0, 0.2, 0.4, 0.6)\nplot(rasterNDVI.change, col = colfunc(10), breaks = seq(-0.5, 0.5, by = 0.1))+\n     mtext(\"NDVI change\")\n\nlm.ndvi.ras <- raster(temp.ndvi, \"p.value\")\n#putting in all the landscape variables elevation class and distance to stream and aspect\nlm.ndvi.elev <- merge(temp.ndvi, elev_classes, by = c(\"x\",\"y\"))\nlm.ndvi.elev <- merge(lm.ndvi.elev, stream_distance, by = c(\"x\",\"y\"))\nlm.ndvi.elev$elev <- as.factor(lm.ndvi.elev$elev)\nlm.ndvi.elev <- merge(lm.ndvi.elev, weimer_aspect, by = c(\"x\", \"y\"))\nlm.ndvi.elev <- merge(lm.ndvi.elev, elev_raw, by = c(\"x\", \"y\"))\n\n# let's look at some stats\n\n# How  many p value less than 0.05\n(sum(temp.ndvi$p.value <= 0.05) / 4153)\n(sum(temp.ndvi$p.value <= 0.01) / 4153)\n\n#adding a factor column based on p.value\n\nlm.ndvi.elev = within(lm.ndvi.elev, {\n  p.class = ifelse(p.value <= 0.05, \"SIGNIFICANT\", \"NOT SIGNIFICANT\")\n  \n})\n\nlm.ndvi.elev$p.class <- as.factor(lm.ndvi.elev$p.class)\n\nsummary(lm.ndvi.elev)\n#write.csv(lm.ndvi.elev, file=\"lm_ndvi_output_may_2017.csv\")\n\nndvi.positive <- subset(lm.ndvi.elev, change > 0)\nndvi.negative <- subset(lm.ndvi.elev, change <= 0)\n\n\n###################\n# LANDESCAPE ANALYSIS setion\n\nndvi.df <- ndvi.elev\n\ncolnames(ndvi.df)[colnames(ndvi.df) == \"ndvi1986\"] <- \"ndvi.86\"\ncolnames(ndvi.df)[colnames(ndvi.df) == \"b1990_ndvi\"] <- \"ndvi.90\"\ncolnames(ndvi.df)[colnames(ndvi.df) == \"b1995_ndvi\"] <- \"ndvi.95\"\ncolnames(ndvi.df)[colnames(ndvi.df) == \"b2005_ndvi\"] <- \"ndvi.05\"\ncolnames(ndvi.df)[colnames(ndvi.df) == \"b2009_ndvi\"] <- \"ndvi.09\"\ncolnames(ndvi.df)[colnames(ndvi.df) == \"b2011_ndvi\"] <- \"ndvi.11\"\n\nx <- merge(ndvi.df, stream_distance, by = c(\"x\", \"y\"))\nx3 <- merge(x, weimer_aspect, by = c(\"x\", \"y\"))\nx4 <- merge(x3, elev_raw, by = c(\"x\", \"y\"))\n\n\nx4$elev <-as.factor(x4$elev)\nclass_ndvi <- x4\n\nclass_ndvi$elev.raw[class_ndvi$elev.raw == 0] <- NA\nclass_ndvi <- na.omit(class_ndvi)\n###### Elevation \n###!!!!!!!!! this section dependent on elevation_time.R script\n\n####ELEVATION ANALYSIS ONE using the output from the linear regression, lm.pipes model\nlm.ndvi.high <- subset(lm.ndvi.elev, elev == \"HIGH\")\nlm.ndvi.mid <- subset(lm.ndvi.elev, elev == \"MID\")\nlm.ndvi.low <- subset(lm.ndvi.elev, elev == \"LOW\")\n\n\n# Uses previous function to summarize elevation linear regression data\nsapply(lm.ndvi.high[,ind], my.summary)\nsapply(lm.ndvi.mid[,ind], my.summary)\nsapply(lm.ndvi.low[,ind], my.summary)\n\n# #############  NDVI\n# #merging w/ elev classes to \nndvi.elev <- merge(ndvi.stack, elev_classes, by = c(\"x\", \"y\"))\n\naggregate(ndvi ~ elev + year, data = ndvi.elev, FUN=mean)\n\nndvi.high <- subset(ndvi.elev, elev == \"HIGH\")\nndvi.mid <- subset(ndvi.elev, elev == \"MID\")\nndvi.low <- subset(ndvi.elev, elev == \"LOW\")\n\nsapply(ndvi.high[,ind], my.summary)\nsapply(ndvi.mid[,ind], my.summary)\nsapply(ndvi.low[,ind], my.summary)\n# \n# ############  G+W\n\n\n\n####Analysis of variance script\n\n####################\n\n#first test normality assumptions (they are good)\nshapiro.test(class_ndvi$ndvi.86)\nshapiro.test(class_ndvi$ndvi.11)\n\n#ANOVA of NDVI (1986 and 2011) to aspect.class, with no covariant#ANOVA for raw differences in elevation and aspect\nlm.elev.fit.86 <- aov(ndvi.86 ~ elev + aspect.class + elev * aspect.class, data = class_ndvi, na.action = na.omit)\nlm.elev.fit.90 <- aov(ndvi.90 ~ elev + aspect.class + elev * aspect.class, data = class_ndvi, na.action = na.omit)\nlm.elev.fit.95 <- aov(ndvi.95 ~ elev + aspect.class + elev * aspect.class, data = class_ndvi, na.action = na.omit)\nlm.elev.fit.05 <- aov(ndvi.05 ~ elev + aspect.class + elev * aspect.class, data = class_ndvi, na.action = na.omit)\nlm.elev.fit.09 <- aov(ndvi.09 ~ elev + aspect.class + elev * aspect.class, data = class_ndvi, na.action = na.omit)\nlm.elev.fit.11 <- aov(ndvi.11 ~ elevelev + aspect.class + elev * aspect.class, data = class_ndvi, na.action = na.omit)\nsum(is.na(class_ndvi$elev))\n\nsummary(lm.elev.fit.86)\nsummary(lm.elev.fit.11)\n\nTukeyHSD(lm.elev.fit.86)\nTukeyHSD(lm.elev.fit.11)\n\nrequire(psych)\n#Using the pscyh packate to describe.by elev\ndescribeBy(class_ndvi, class_ndvi$elev)\n\n#Using the pscyh packate to describe.by aspect.class\ndescribeBy(class_ndvi, class_ndvi$aspect.class)\n\n#ANOVA on NDVI change by elevation and aspect.class from trend analysis\nshapiro.test(lm.ndvi.elev$change)\nlm.trend.ndvi.fit <- aov(change ~ elev * aspect.class, data = lm.ndvi.elev)\n\nsummary(lm.trend.ndvi.fit)\nTukeyHSD(lm.trend.ndvi.fit)\n\n#looking at means from each 1986, and 2011 and trend\naggregate(ndvi.86 ~ elev + aspect.class, data = class_ndvi, FUN = mean)\naggregate(ndvi.86 ~ aspect.class, data = class_ndvi, FUN = sd)\n\naggregate(ndvi.11 ~ elev + aspect.class, data = class_ndvi, FUN = mean)\naggregate(ndvi.11 ~ aspect.class, data = class_ndvi, FUN = mean)\n\naggregate(change ~ elev + aspect.class, data = lm.ndvi.elev, FUN = mean)\naggregate(change ~ aspect.class, data = lm.ndvi.elev, FUN = mean)\n\n#looking at means by elevation\naggregate(ndvi.86 ~ elev, data = class_ndvi, FUN = mean)\naggregate(ndvi.11 ~ elev, data = class_ndvi, FUN = mean)\n\naggregate(diff ~ elev, data = class_ndvi, FUN = mean)\naggregate(ndvi.11 ~ elev, data = class_ndvi, FUN = mean)\n#####let's do a further analysis on our change data\n\n#this does a count of the number of cells that have a sign change (either that are positive or negative)\ntable(sign(lm.ndvi.elev$change))\n\nndvi.positive <- subset(lm.ndvi.elev, change > 0)\nndvi.negative <- subset(lm.ndvi.elev, change <= 0)\n\n#creating output table showing stastics on change\n\nmy.summary <- function(x, na.rm=TRUE) {\n  result <- c(Mean = as.numeric(format(mean(x, na.rm=na.rm), digits=3)),\n              SD = format(sd(x, na.rm=na.rm), digits=3),\n              Median = format(median(x, na.rm=na.rm), digits=3),\n              Min = format(min(x, na.rm=na.rm), digits = 3),\n              Max = format(max(x, na.rm=na.rm), digits = 3),\n              N = length(x),\n              SE = sd(x) / sqrt(length(x)),\n              CV = abs(mean(x)) / abs(sd(x)))\n}\n\nind3 <- sapply(ndvi.positive, is.numeric)\nind4 <- sapply(ndvi.negative, is.numeric)\n\n#prints the two tales contrasting postitive and negative values\nsapply(ndvi.positive[,ind3], my.summary)\nsapply(ndvi.negative[,ind4], my.summary)\n\n#boxplot for distribution of ndvi\nndvi.box <- boxplot(ndvi~year, data=stack, main=\"Distribution of NDVI values by year\", ylab=\"NDVI\")\n\n\n\n\n\n\n#ANCOVA testing differences in NDVI by elevation by stream distance\n\n\n\n######\n#####\n#####\n# HERE!!!!!!!!!\ncontrasts(class_ndvi$elev)=contr.poly(3)\nmodel.1=aov(ndvi.11 ~ stream_dist + elev, data = class_ndvi)\nAnova(model.1, type = \"III\")\n\nsummary.lm(model.1)\nposth=glht(model.1, linfct=mcp(elev=\"Tukey\"))  ##gives the post-hoc Tukey analysis of elevation, which is the factorvariable\nsummary(posth) ##shows the output in a nice format.\ninteract.model=aov(ndvi.11 ~ stream_dist + elev + stream_dist:elev, data=class_ndvi)\nsummary(interact.model)\n#Vist these sites:   http://goo.gl/yxUZ1R \n# http://stats.stackexchange.com/questions/51780/how-i-make-an-ancova-in-rR\n\n\n#ANCOVA  elevation and stream distance on 86, 11, and change\n\n#1986\nresults.86 = lm(ndvi.86 ~ stream_dist * elev, data = class_ndvi)\naov.86 <-aov(results.86)\nsummary(aov.86)\nTukeyHSD(aov.86, \"elev\")\nqqnorm(results.86$residuals)\n\nplot(results.86$fitted,results$res,xlab=\"Fitted\",ylab=\"Residuals\")\n\n#2011\nresults.11 = lm(ndvi.11 ~ stream_dist * elev , data = class_ndvi)\naov.11 <- aov(results.11)\nsummary(aov.11)\nTukeyHSD(aov.11, \"elev\")\nqqnorm(results.11$residuals)\n\nhead(ndvi.86)\n\nplot(results.11$fitted,results$res,xlab=\"Fitted\",ylab=\"Residuals\")\n\n#ndvi difference from endmembers\nresults.change = lm(diff ~ stream_dist * elev , data = class_ndvi)\naov.change <-aov(results.change)\nsummary(aov.change)\nTukeyHSD(aov.change, \"elev\")\nqqnorm(results.change$residuals)\n\nplot(results.change$fitted,results$res,xlab=\"Fitted\",ylab=\"Residuals\")\n\np.stream.elev <- ggplot(class_ndvi, aes(x=stream_dist, y=ndvi.11, color=elev))+\n  geom_point(size=3)\n\n\n\n##### Piecewise regression\nrequire(segmented)\n\n# piecewise regression on class_ndvi \n\n#2011\nx11()\nplot(class_ndvi$stream_dist, class_ndvi$ndvi.11)\nlm.ndvi.stream.11 <- lm(ndvi.11 ~ stream_dist, data = class_ndvi)\n\nseg.ndvi.stream.11 <- segmented(lm.ndvi.stream.11, seg.Z = ~stream_dist, psi=100,\n                                control = seg.control(display=TRUE))\nplot(seg.ndvi.stream.11, conf.level = 0.95, shade = TRUE)\n\n#1986\nplot(class_ndvi$stream_dist, class_ndvi$ndvi.86)\nlm.ndvi.stream.86 <- lm(ndvi.86 ~ stream_dist, data = class_ndvi)\n\nseg.ndvi.stream.86 <- segmented(lm.ndvi.stream.86, seg.Z = ~stream_dist, psi=100,\n                                control = seg.control(display=TRUE))\nplot(seg.ndvi.stream.86, conf.level = 0.95, shade = TRUE)\n\n#Estimating breakpoints\nsummary(seg.ndvi.stream.86)\nsummary(seg.ndvi.stream.11)\n\n#identifies the changepoint as 142.4 m +/- 4.468\n\n##RIPARIAN\n#Now to classify as riparian or upland based on stream_dist threshold\nclass_ndvi$stream_class[class_ndvi$stream_dist <= 150] <- \"Riparian\"\nclass_ndvi$stream_class[class_ndvi$stream_dist > 150] <- \"Upland\"\n\n#OK, now let's check that jam with some linear regression action\nriparian.ndvi <- subset(class_ndvi, class_ndvi$stream_class == \"Riparian\")\nupland.ndvi <- subset(class_ndvi, class_ndvi$stream_class == \"Upland\")\n\n#Linear regression using the RIPARIAN data\nlm.riparian.11 <- lm(ndvi.11 ~ stream_dist, data = riparian.ndvi)\nlm.riparian.86 <- lm(ndvi.86 ~ stream_dist, data = riparian.ndvi)\nlm.riparian.change  <-lm(diff  ~ stream_dist, data = riparian.ndvi)\n\n#pearson's correlation\ncor.riparian.11 <- cor(riparian.ndvi$stream_dist, riparian.ndvi$ndvi.11, use = \"everything\", method = \"pearson\")\ncor.riparian.86 <- cor(riparian.ndvi$stream_dist, riparian.ndvi$ndvi.86, use = \"everything\", method = \"pearson\")\ncor.riparian.change <- cor(riparian.ndvi$stream_dist, riparian.ndvi$change, use = \"everything\", method = \"pearson\")\n\nsummary(lm.riparian.86)\nsummary(lm.riparian.11)\nsummary(lm.riparian.change)\n\n##UPLAND\nlm.upland.86 <- lm(ndvi.86 ~ stream_dist, data = upland.ndvi)\nlm.upland.11 <- lm(ndvi.11 ~ stream_dist, data = upland.ndvi)\nlm.upland.change <- lm(change ~ stream_dist, data = upland.ndvi)\n\n#pearson's correlation\ncor.upland.11 <- cor(upland.ndvi$stream_dist, upland.ndvi$ndvi.11, use = \"everything\", method = \"pearson\")\ncor.upland.86 <- cor(upland.ndvi$stream_dist, upland.ndvi$ndvi.86, use = \"everything\", method = \"pearson\")\ncor.upland.change <- cor(upland.ndvi$stream_dist, upland.ndvi$change, use = \"everything\", method = \"pearson\")\n\nsummary(lm.upland.86)\nsummary(lm.upland.11)\nsummary(lm.upland.change)\n\n\n\nplot(upland.ndvi$stream_dist, upland.ndvi$ndvi.11)\nplot(riparian.ndvi$stream_dist, riparian.ndvi$ndvi.86)\n\n\n\n\n\n# # Now we want to recombine the data to look at the mean increase in NDVI for each \n# This will combing the ndvi.comp df which tells us the change in classification based on the endmembmers of 1986 and 2011 NDVI\n# with the linear regression function results\nclass_ndvi_comp <- merge(class_ndvi, ndvi.comp, by = c(\"x\",\"y\"))\n\n#CHANGE\naggregate.ndvi.comp <- aggregate(change ~ class, data = class_ndvi_comp, FUN =  function(x) c(  = sd(x), AVG= mean(x)))\nprint(aggregate.ndvi.comp)\n\naggregate.ndvi.elev.comp <- aggregate(change ~ class*elev, data = class_ndvi_comp, mean, na.rm=TRUE)\nprint(aggregate.ndvi.elev.comp)\n\naggregate.ndvi.elev.stream.comp <- aggregate(change ~ class*elev*stream_class, data = class_ndvi_comp, mean, na.rm=TRUE)\nprint(aggregate.ndvi.elev.stream.comp)\n\naggregate.ndvi.stream.comp <- aggregate(change ~ class*stream_class, data = class_ndvi_comp, mean, na.rm=TRUE)\nprint(aggregate.ndvi.stream.comp)\n\n#NDVI\naggregate.ndvi <- aggregate(ndvi.11 ~ class, data = class_ndvi_comp, mean, na.rm=TRUE)\nprint(aggregate.ndvi)\n\naggregate.ndvi.elev <- aggregate(ndvi.11 ~ class*elev, data = class_ndvi_comp, mean, na.rm=TRUE)\nprint(aggregate.ndvi.elev)\n\naggregate.ndvi.elev.stream <- aggregate(ndvi.11 ~ class*elev*stream_class, data = class_ndvi_comp, mean, na.rm=TRUE)\nprint(aggregate.ndvi.elev.stream)\n                                             \naggregate.ndvi.stream <- aggregate(ndvi.11 ~ class*stream_class, data = class_ndvi_comp, mean, na.rm=TRUE)\nprint(aggregate.ndvi.stream)\n\n\n\nas.table(aggregate.ndvi.stream)\n",
    "created" : 1473351305400.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2359523308",
    "id" : "4F70874B",
    "lastKnownWriteTime" : 1520620104,
    "last_content_update" : 1520620104276,
    "path" : "C:/github/cvi_ndvi_redux/05_cvi_ndvi_stats_need_to_update.R",
    "project_path" : "05_cvi_ndvi_stats_need_to_update.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}